package net.login;
import java.sql.*;
import javax.xml.parsers.*;
import java.io.*;
import org.w3c.dom.*;

public class PopulateDB {
	 public static String getMd5(String input) 
	    { 
	        try { 
	  
	            // Static getInstance method is called with hashing MD5 
	            MessageDigest md = MessageDigest.getInstance("MD5"); 
	  
	            // digest() method is called to calculate message digest 
	            //  of an input digest() return array of byte 
	            byte[] messageDigest = md.digest(input.getBytes()); 
	  
	            // Convert byte array into signum representation 
	            BigInteger no = new BigInteger(1, messageDigest); 
	  
	            // Convert message digest into hex value 
	            String hashtext = no.toString(16); 
	            while (hashtext.length() < 32) { 
	                hashtext = "0" + hashtext; 
	            } 
	            return hashtext; 
	        }  
	  
	        // For specifying wrong message digest algorithms 
	        catch (NoSuchAlgorithmException e) { 
	            throw new RuntimeException(e); 
	        } 
	    }}
public static void main(String[] args) { 
try {
	Class.forName("com.mysql.jdbc.Driver");
	Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/sys", "root", "#");
	Statement st=con.createStatement();
	DocumentBuilderFactory docBuilderFactory = DocumentBuilderFactory.newInstance();
	DocumentBuilder docBuilder = docBuilderFactory.newDocumentBuilder();
	Document document = docBuilder.parse (new File("/Users/hbj/eclipse/workspace/A2/resources/users.xml"));
	document.getDocumentElement().normalize();
	System.out.println ("Initial element within document is " + document.getDocumentElement().getNodeName());
	NodeList listOfUsers = document.getElementsByTagName("user");
for(int s=0; s<listOfUsers.getLength(); s++){
	Node firstUserNode = listOfUsers.item(s);
	
	if(firstUserNode.getNodeType() == Node.ELEMENT_NODE){
	Element firstUserElement = (Element)firstUserNode;
	NodeList usernameList = firstUserElement.getElementsByTagName("username");
	Element usernameElement =(Element)usernameList.item(0);
	
	NodeList textFNList = usernameElement.getChildNodes();
	String username=((Node)textFNList.item(0)).getNodeValue().trim();
	
	NodeList emailList = firstUserElement.getElementsByTagName("email");
	Element emailElement =(Element)emailList.item(0);
	
	NodeList textLNList = emailElement.getChildNodes();
	String email= ((Node)textLNList.item(0)).getNodeValue().trim();
	
	NodeList passwordList = firstUserElement.getElementsByTagName("password");
	Element passwordElement =(Element)passwordList.item(0);
	
	NodeList textPNList = passwordElement.getChildNodes();
	String password= ((Node)textPNList.item(0)).getNodeValue().trim();
	
	int i=st.executeUpdate("insert into users(username,email,password) values('"+username+"','"+email+"','"+password+"')");
	}
}
	System.out.println("Data is successfully inserted!");
	}catch (Exception err) {
	System.out.println(" " + err.getMessage ());
	}
	}
}



    
   // new FileReader(getClass().getClassLoader().getResource("/WEB-INF/users.json").getPath())

